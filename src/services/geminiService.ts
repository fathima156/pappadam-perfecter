export interface GeminiApiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text?: string;
        inlineData?: {
          mimeType: string;
          data: string;
        };
      }>;
    };
  }>;
}

export interface GeminiImageRequest {
  contents: Array<{
    parts: Array<{
      text?: string;
      inlineData?: {
        mimeType: string;
        data: string;
      };
    }>;
  }>;
  generationConfig: {
    temperature: number;
    topK: number;
    topP: number;
    maxOutputTokens: number;
  };
}

export const convertImageToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      // Remove the data:image/[type];base64, prefix
      const base64Data = result.split(',')[1];
      resolve(base64Data);
    };
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};

export const reconstructPappadamImage = async (
  imageFile: File,
  apiKey: string
): Promise<string> => {
  try {
    // Convert image to base64
    const base64Image = await convertImageToBase64(imageFile);
    
    // Prepare the request payload
    const requestPayload: GeminiImageRequest = {
      contents: [
        {
          parts: [
            {
              text: "Reconstruct this broken pappadam into a perfect, round, golden, and crispy one. Make it look beautiful, perfectly circular, with an even golden color and crispy texture. The pappadam should look appetizing and perfectly cooked."
            },
            {
              inlineData: {
                mimeType: imageFile.type,
                data: base64Image
              }
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3,
        topK: 32,
        topP: 1,
        maxOutputTokens: 4096
      }
    };

    // Make API call to Gemini
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestPayload)
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error?.message || `API call failed with status ${response.status}`);
    }

    const data: GeminiApiResponse = await response.json();
    
    if (!data.candidates?.[0]?.content?.parts) {
      throw new Error('No image data received from API');
    }

    // Find the image part in the response
    const imagePart = data.candidates[0].content.parts.find(
      part => part.inlineData?.mimeType?.startsWith('image/')
    );

    if (!imagePart?.inlineData?.data) {
      throw new Error('No image generated by the model');
    }

    // Convert base64 to displayable URL
    const imageUrl = `data:${imagePart.inlineData.mimeType};base64,${imagePart.inlineData.data}`;
    
    return imageUrl;
  } catch (error) {
    console.error('Error reconstructing pappadam:', error);
    throw error;
  }
};